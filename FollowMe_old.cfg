#define DEFAULT_AcftType        1          // [0..15] default aircraft-type: glider
#define DEFAULT_GeoidSepar     40          // [m]
#define DEFAULT_CONbaud    115200
#define DEFAULT_PPSdelay      100
#define DEFAULT_FreqPlan        0

// #define WITH_HELTEC                        // HELTEC module: PCB LED on GPI025
// #define WITH_TTGO                          // TTGO module: PCB LED on GPIO2, GPIO25 free to use as DAC2 output
// #define WITH_TBEAM                          // T-Beam module
// #define WITH_TBEAM_V10                      // T-Beam module
// #define WITH_M5_JACEK                         // JACEK M5 ESP32 OGN-Tracker
#define WITH_FollowMe                         // by Avionix

// #define WITH_ILI9341                        // 320x240 M5stack
// #define WITH_ST7789                         // IPS 240x240 ST7789
// #define WITH_TFT_LCD                       // TFT LCD (incomplete)
// #define WITH_OLED                          // OLED display on the I2C: some TTGO modules are without OLED display
// #define WITH_OLED2                         // 2nd OLED display, I2C address next higher
#define WITH_U8G2_OLED                     // I2C OLED through the U8g2 library
#define WITH_U8G2_SH1106                   // the bigger OLED controller
#define WITH_U8G2_FLIP                     // flip the OLED screen

#define WITH_RFM95                         // RF chip selection: FollowMe, HELTEC and TTGO use sx1276 which is same as RFM95 module

// #define WITH_SLEEP                         // with software sleep mode controlled by the long-press on the button

// #define WITH_AXP                           // with AXP192 power controller (T-BEAM V1.0)
// #define WITH_BQ                            // with BQ24295  power controller (new FollowMe)

// #define WITH_LED_RX
// #define WITH_LED_TX

#define WITH_GPS_ENABLE                    // use GPS_ENABLE control line to turn the GPS ON/OFF
#define WITH_GPS_PPS                       // use the PPS signal from GPS for precise time-sync.
#define WITH_GPS_CONFIG                    // attempt to configure higher GPS baud rate and airborne mode

// #define WITH_GPS_UBX                       // GPS understands UBX
#define WITH_GPS_MTK                       // GPS understands MTK
// #define WITH_GPS_SRF
// #define WITH_MAVLINK

// #define WITH_GPS_UBX_PASS                  // to pass directly UBX packets to/from GPS
// #define WITH_GPS_NMEA_PASS                 // to pass directly NMEA to/from GPS

// #define WITH_BMP180                        // BMP180 pressure sensor
// #define WITH_BMP280                        // BMP280 pressure sensor
#define WITH_BME280                        // BMP280 with humidity (still works with BMP280)
// #define WITH_MS5607                        // MS5607 pressure sensor

#define WITH_PFLAA                         // $PFLAU and $PFLAA for compatibility with XCsoar and LK8000
// #define WITH_POGNT                         // $POGNT for traffic info
#define WITH_LOOKOUT

#define WITH_CONFIG                        // interpret the console input: $POGNS to change parameters

// #define WITH_BEEPER                        // with digital buzzer
// #define WITH_SOUND                         // with analog sound produced by DAC on pin 25

// #define WITH_KNOB
// #define WITH_VARIO

#define WITH_LORAWAN                       // LoRaWAN TTN connectivity
// #define WITH_PAW                           // beta-code for PilotAware transmission
// #define WITH_FANET                         // beta-code for FANET transmissions, but breaks LoRaWAN, to be improved

#define WITH_AP                            // create WiFi Access Point for data, setup and log files
#define WITH_AP_BUTTON                     // activate Access Point only when button pressed at startup
#define WITH_HTTP                          // HTTP server, works with AP and Stratux
#define WITH_BT_SPP                        // (classic) Bluetooth serial port for smartphone/tablet link

// #define WITH_STRATUX                       // beta-code: connect to Stratux WiFi and send GPS and traffic info
#define WITH_APRS                          // alpha-code: attempt to connect to the wifi router for uploading the log files to APRS

#define WITH_SD                            // use the SD card in SPI mode and FAT file system
#define WITH_SPIFFS_FAT
#define WITH_SPIFFS                        // use SPIFFS file system in Flash
#define WITH_LOG                           // log own positions and other received to SPIFFS and possibly to uSD
#define WITH_SDLOG                         // 

// #define WITH_ENCRYPT                       // Encrypt (optionally) the position

#if defined(WITH_STRATUX) || defined(WITH_APRS) || defined(WITH_AP)
#define WITH_WIFI
#endif

